package examples.customassertions;

import static java.lang.String.format;

import org.fest.assertions.api.AbstractAssert;
import org.fest.assertions.api.Assertions;

import tradingapp.domain.permission.Permission;
import tradingapp.domain.user.Trader;
import tradingapp.domain.user.UserDetail;
import examples.customassertions.TraderAssert;

/**
 * {@link Trader} specific assertions - Generated by CustomAssertionGenerator.
 */
public class TraderAssert extends AbstractAssert<TraderAssert, Trader> {

	/**
	 * Creates a new </code>{@link TraderAssert}</code> to make assertions on actual Trader.
	 * @param actual the Trader we want to make assertions on.
	 */
	public TraderAssert(Trader actual) {
		super(actual, TraderAssert.class);
	}

	/**
	 * An entry point for TraderAssert to follow Fest standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myTrader)</code> and get specific assertion with code completion.
	 * @param actual the Trader we want to make assertions on.
	 * @return a new </code>{@link TraderAssert}</code>
	 */
	public static TraderAssert assertThat(Trader actual) {
		return new TraderAssert(actual);
	}

	/**
	 * Verifies that the actual Trader's permissions contains the given Permission elements.
	 * @param permissions the given elements that should be contained in actual Trader's permissions.
	 * @return this assertion object.
	 * @throws AssertionError if the actual Trader's permissions does not contain all given Permission elements.
	 */
	public TraderAssert hasPermissions(Permission... permissions) {
		// check that actual Trader we want to make assertions on is not null.
		isNotNull();

		// check that given Permission varargs is not null.
		if (permissions == null)
			throw new AssertionError(
					"Expecting permissions parameter not to be null.");

		// check with standard error message (see commented below to set your own message).
		Assertions.assertThat(actual.getPermissions()).contains(permissions);

		// uncomment the 4 lines below if you want to build your own error message :
		// WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
		// String errorMessage = "my error message";
		// assertionInfo.overridingErrorMessage(errorMessage);
		// Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Trader has no permissions.
	 * @return this assertion object.
	 * @throws AssertionError if the actual Trader's permissions is not empty.
	 */
	public TraderAssert hasNoPermissions() {
		// check that actual Trader we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format(
				"Expected actual <%s> not to have permissions but had :\\n%s",
				actual, actual.getPermissions());

		// check
		if (!actual.getPermissions().isEmpty())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Trader's userDetail is equal to the given one.
	 * @param userDetail the given userDetail to compare the actual Trader's userDetail to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Trader's userDetail is not equal to the given one.
	 */
	public TraderAssert hasUserDetail(UserDetail userDetail) {
		// check that actual Trader we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format(
				"Expected Trader's userDetail to be <%s> but was <%s>",
				userDetail, actual.getUserDetail());

		// check
		if (!actual.getUserDetail().equals(userDetail)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Trader's userName is equal to the given one.
	 * @param userName the given userName to compare the actual Trader's userName to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Trader's userName is not equal to the given one.
	 */
	public TraderAssert hasUserName(String userName) {
		// check that actual Trader we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format(
				"Expected Trader's userName to be <%s> but was <%s>", userName,
				actual.getUserName());

		// check
		if (!actual.getUserName().equals(userName)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
